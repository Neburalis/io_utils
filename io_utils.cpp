#include <assert.h>
#include <errno.h>
#include <fcntl.h>
#include <math.h>
#include <sys/stat.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <limits.h>

#include "io_utils.h"

void show_gif(const char * const filename) {
    assert(filename != NULL && "U must pass filename");

    if (filename == NULL) {
        errno = EINVAL;
        return;
    }

#ifdef __APPLE__ // command for macos
    // const uint8_t max_len = 100; // max comand len (max filename len is 50)
    char cmd[512] = {0};
    snprintf(cmd, sizeof(cmd), "qlmanage -p cat_gifs/%s.gif > /dev/null 2>&1", filename);
    system(cmd);
#endif // __APPLE__
    return;
}

void show_random_gif(size_t n, const char ** filenames) {
    assert(n != 0               && "U must pass at less one element");
    assert(filenames != NULL    && "U must pass array");

    if (n == 0) {
        errno = EINVAL;
        return;
    }
    if (filenames == NULL) {
        errno = EINVAL;
        return;
    }

#ifdef __APPLE__ // show_gif —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ MACOS
    size_t index = arc4random_uniform((uint32_t)n);
    show_gif(filenames[index]);
#endif // __APPLE__
    return;
}

int msleep(long msec) {
    assert(msec >= 0 && "Time cannot be negative");

    if (msec < 0) {
        errno = EINVAL;
        return -1;
    }

    struct timespec ts = {};
    int res = 0;

    ts.tv_sec = msec / 1000;              // miliseconds in one second
    ts.tv_nsec = (msec % 1000) * 1000000; // nanoseconds io one second
    //                    ^----------------- remove int part seconds in ms

    do {
        res = nanosleep(&ts, &ts);
    } while (res && errno == EINTR);

    return res;
}

void spinner(const char * const str, uint32_t time, uint32_t period) {
    assert(str != NULL);

    if (str == NULL) {
        errno = EINVAL;
        return;
    }

    const char pp[] = {'-', '\\', '|', '/'}; // spinner char
    for (uint32_t i = 0; i < (uint32_t) time/period; ++i) {
        printf("%s", str);
        fflush(stdout);
        printf("%c", pp[i % 4]);
        msleep(period);
        printf("\r");
    }

    return;
}

size_t lines_in_file(FILE * const fp) {
    assert(fp != NULL && "You must pass FILE");

    if (!fp){
        errno = EBADF;
        return 0;
    }

    size_t lines = 1;
    int ch = 0;

    while(!feof(fp)) {
        ch = fgetc(fp);
        if(ch == '\n')
        {
            ++lines;
        }
    }

    if (fseek(fp, 0, SEEK_SET)) {
        errno = EBADF;
        return 0;
    }
    return lines;
}

int clear_stdin_buffer() {
    int c = 0;
    while ((c = getchar()) != '\n' && c != EOF)
        continue;
    return 1;
}

int is_stdin_buffer_clean() {
    int c = 0;
    while ((c = getchar()) != '\n' && c != EOF) {
        if (c == ' ' || c == '\t')
            continue;
        return 0;
    }
    return 1;
}

double safe_get_double(const char * const prompt) {
    assert(prompt != NULL && "You must pass variable name");

    if (prompt == NULL) {
        errno = EINVAL;
        return -1;
    }

    int scanf_status = 0;
    double var = NAN;
    for (;;) {
        printf("%s", prompt);
        scanf_status = scanf("%lg", &var);
        if (scanf_status == EOF) {
            fprintf(stderr, "–í–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n");
            return NAN;
        }
        if (scanf_status && !isinf(var) && isfinite(var) && is_stdin_buffer_clean())
            return var;
        clear_stdin_buffer();
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–º–µ—à–Ω—É—é –≥–∏—Ñ–∫—É —Å –∫–æ—Ç–∏–∫–æ–º
        {
                const char * cat_gifs[] = {"lvl6cat1", "123"};
                show_random_gif(2, (const char **) cat_gifs);
            }
        printf("üò¢ –í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å.     \n"
               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 12.34). \n"
               "–î–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–æ—á–∫–∞ (.).                    \n");
    }
}

int is_user_want_continue(const char * const ask_message) {
    assert(ask_message != NULL && "You must pass message for user");

    if (ask_message == NULL) {
        errno = EINVAL;
        return -1;
    }

    int choice = 0;

    printf("%s", ask_message);
    fflush(stdout);

    do {
        choice = getchar();
    }
    while (choice != 'y' &&
           choice != 'Y' &&
           choice != 'n' &&
           choice != 'N' &&
           choice != '\n');

    if (choice == 'Y' || choice == 'y')
        return 1;
    return 0;
}

ssize_t file_byte_size(const char * const filename) {
    assert(filename != NULL && "U must provide valid filename");

    if (filename == NULL) {
        errno = EINVAL;
        return -2;
    }

    struct stat file_info = {};

    if (stat(filename, &file_info) == -1) {
        ERROR_MSG("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ %s\n", filename);
        return -1;
    }

    return (ssize_t) file_info.st_size;
}

char * read_file_to_buf(const char * const filename, size_t * const buf_len) {
    assert(filename != NULL && "You must provide a valid filename");
    assert(buf_len != NULL  && "You must provide a valid pointer to buf_len");

    if (filename == NULL) {
        errno = EINVAL;
        return NULL;
    }
    if (buf_len == NULL) {
        errno = EINVAL;
        return NULL;
    }

    FILE * fp = fopen(filename, "rb");
    if (!fp) {
        // errno —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fopen()
        return NULL;
    }

    ssize_t byte_len = file_byte_size(filename);
    if (byte_len < 0) {
        // –û—à–∏–±–∫–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ file_byte_size()
        fclose(fp);
        return NULL;
    }
    if (byte_len == 0) {
        // –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª ‚Äî –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–ª—É—á–∞–π
        fclose(fp);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ: byte_len + 1 –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å SIZE_MAX
    if ((size_t)byte_len > SIZE_MAX - 1) {
        fclose(fp);
        errno = ENOMEM; // –∏–ª–∏ EOVERFLOW, –Ω–æ ENOMEM —É–º–µ—Å—Ç–Ω–µ–µ –ø—Ä–∏ –∞–ª–ª–æ–∫–∞—Ü–∏–∏
        return NULL;
    }

    size_t alloc_size = (size_t)byte_len + 1;

    char * buf = (char *) calloc(alloc_size, sizeof(char));
    if (buf == NULL) {
        fclose(fp);
        return NULL;
    }

    if (byte_len > 0) {
        fread(buf, 1, (size_t)byte_len, fp);
        if (ferror(fp)) {
            free(buf);
            fclose(fp);
            return NULL;
        }
    }
    // –î–ª—è –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ nread –æ—Å—Ç–∞—ë—Ç—Å—è 0 ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

    fclose(fp);

    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±—É—Ñ–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω –Ω—É–ª—ë–º (calloc —É–∂–µ –æ–±–Ω—É–ª–∏–ª, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    buf[byte_len] = '\0';

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º **–ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞**, –≤–∫–ª—é—á–∞—è '\0'
    *buf_len = alloc_size;

    return buf;
}

size_t * read_file_to_size_t_buf(const char *filename, size_t *count) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if (filename == NULL || count == NULL) {
        errno = EINVAL;
        return NULL;
    }
    *count = 0;

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
    FILE *fp = fopen(filename, "rb");
    if (!fp) {
        return NULL; // errno —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fopen()
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    struct stat st;
    if (fstat(fileno(fp), &st) != 0) {
        fclose(fp);
        return NULL; // errno —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω fstat()
    }

    off_t file_size = st.st_size;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω sizeof(size_t)
    if (file_size % sizeof(size_t) != 0) {
        fclose(fp);
        errno = EINVAL; // –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π –∏–ª–∏ –Ω–µ —Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç
        return NULL;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä SSIZE_MAX (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–∏)
    if (file_size > SSIZE_MAX) {
        fclose(fp);
        errno = EFBIG;
        return NULL;
    }

    size_t total_bytes = (size_t)file_size;
    size_t n = total_bytes / sizeof(size_t);

    // –í—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å (malloc, –Ω–µ calloc ‚Äî –¥–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ, –æ–±–Ω—É–ª–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ)
    size_t *buf = (size_t *)malloc(total_bytes);
    if (!buf) {
        fclose(fp);
        return NULL; // errno = ENOMEM (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω malloc)
    }

    // –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    size_t nread = fread(buf, 1, total_bytes, fp);
    if (nread != total_bytes) {
        int saved_errno = ferror(fp) ? errno : EIO;
        free(buf);
        fclose(fp);
        errno = saved_errno;
        return NULL;
    }

    fclose(fp);
    *count = n;
    return buf;
}